package net.pointbridge.android.sales.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.pointbridge.android.sales.db.TransferSerial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRANSFER_SERIAL.
*/
public class TransferSerialDao extends AbstractDao<TransferSerial, String> {

    public static final String TABLENAME = "TRANSFER_SERIAL";

    /**
     * Properties of entity TransferSerial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ts_id = new Property(0, String.class, "ts_id", true, "TS_ID");
        public final static Property Td_id = new Property(1, String.class, "td_id", false, "TD_ID");
        public final static Property Tm_id = new Property(2, String.class, "tm_id", false, "TM_ID");
        public final static Property Itm_code = new Property(3, String.class, "itm_code", false, "ITM_CODE");
        public final static Property Serial_no = new Property(4, String.class, "serial_no", false, "SERIAL_NO");
        public final static Property Src_code = new Property(5, String.class, "src_code", false, "SRC_CODE");
        public final static Property No_seq = new Property(6, Integer.class, "no_seq", false, "NO_SEQ");
        public final static Property Astate = new Property(7, Integer.class, "astate", false, "ASTATE");
        public final static Property Locked = new Property(8, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(9, Integer.class, "posted", false, "POSTED");
        public final static Property Mark = new Property(10, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(11, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(12, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private Query<TransferSerial> transferMaster_Tr_serial_fk1Query;

    public TransferSerialDao(DaoConfig config) {
        super(config);
    }
    
    public TransferSerialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSFER_SERIAL' (" + //
                "'TS_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: ts_id
                "'TD_ID' TEXT," + // 1: td_id
                "'TM_ID' TEXT," + // 2: tm_id
                "'ITM_CODE' TEXT," + // 3: itm_code
                "'SERIAL_NO' TEXT," + // 4: serial_no
                "'SRC_CODE' TEXT," + // 5: src_code
                "'NO_SEQ' INTEGER," + // 6: no_seq
                "'ASTATE' INTEGER," + // 7: astate
                "'LOCKED' INTEGER," + // 8: locked
                "'POSTED' INTEGER," + // 9: posted
                "'MARK' INTEGER," + // 10: mark
                "'MODI_BY' TEXT," + // 11: modi_by
                "'MODI_DATE' INTEGER);"); // 12: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSFER_SERIAL_TM_ID ON TRANSFER_SERIAL" +
                " (TM_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSFER_SERIAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransferSerial entity) {
        stmt.clearBindings();
 
        String ts_id = entity.getTs_id();
        if (ts_id != null) {
            stmt.bindString(1, ts_id);
        }
 
        String td_id = entity.getTd_id();
        if (td_id != null) {
            stmt.bindString(2, td_id);
        }
 
        String tm_id = entity.getTm_id();
        if (tm_id != null) {
            stmt.bindString(3, tm_id);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(4, itm_code);
        }
 
        String serial_no = entity.getSerial_no();
        if (serial_no != null) {
            stmt.bindString(5, serial_no);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(6, src_code);
        }
 
        Integer no_seq = entity.getNo_seq();
        if (no_seq != null) {
            stmt.bindLong(7, no_seq);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(8, astate);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(9, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(10, posted);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(11, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(12, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(13, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransferSerial readEntity(Cursor cursor, int offset) {
        TransferSerial entity = new TransferSerial( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ts_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // td_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tm_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itm_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serial_no
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // src_code
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // no_seq
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // astate
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // locked
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // posted
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // mark
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // modi_by
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransferSerial entity, int offset) {
        entity.setTs_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTd_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTm_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItm_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSerial_no(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSrc_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNo_seq(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAstate(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLocked(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPosted(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMark(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setModi_by(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setModi_date(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TransferSerial entity, long rowId) {
        return entity.getTs_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TransferSerial entity) {
        if(entity != null) {
            return entity.getTs_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tr_serial_fk1" to-many relationship of TransferMaster. */
    public List<TransferSerial> _queryTransferMaster_Tr_serial_fk1(String tm_id) {
        synchronized (this) {
            if (transferMaster_Tr_serial_fk1Query == null) {
                QueryBuilder<TransferSerial> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Tm_id.eq(null));
                queryBuilder.orderRaw("TS_ID ASC");
                transferMaster_Tr_serial_fk1Query = queryBuilder.build();
            }
        }
        Query<TransferSerial> query = transferMaster_Tr_serial_fk1Query.forCurrentThread();
        query.setParameter(0, tm_id);
        return query.list();
    }

}
