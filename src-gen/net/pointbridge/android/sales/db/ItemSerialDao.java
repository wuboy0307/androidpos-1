package net.pointbridge.android.sales.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.pointbridge.android.sales.db.ItemSerial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ITEM_SERIAL.
*/
public class ItemSerialDao extends AbstractDao<ItemSerial, String> {

    public static final String TABLENAME = "ITEM_SERIAL";

    /**
     * Properties of entity ItemSerial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Serial_id = new Property(0, String.class, "serial_id", true, "SERIAL_ID");
        public final static Property Itm_code = new Property(1, String.class, "itm_code", false, "ITM_CODE");
        public final static Property Serial_no = new Property(2, String.class, "serial_no", false, "SERIAL_NO");
        public final static Property Serial_buydate = new Property(3, java.util.Date.class, "serial_buydate", false, "SERIAL_BUYDATE");
        public final static Property Serial_state = new Property(4, Integer.class, "serial_state", false, "SERIAL_STATE");
        public final static Property Serial_selldate = new Property(5, java.util.Date.class, "serial_selldate", false, "SERIAL_SELLDATE");
        public final static Property Wh_code = new Property(6, String.class, "wh_code", false, "WH_CODE");
        public final static Property Cust_code = new Property(7, String.class, "cust_code", false, "CUST_CODE");
        public final static Property Src_code = new Property(8, String.class, "src_code", false, "SRC_CODE");
        public final static Property Mark = new Property(9, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(10, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(11, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private Query<ItemSerial> item_Item_serial_fk1Query;

    public ItemSerialDao(DaoConfig config) {
        super(config);
    }
    
    public ItemSerialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ITEM_SERIAL' (" + //
                "'SERIAL_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: serial_id
                "'ITM_CODE' TEXT," + // 1: itm_code
                "'SERIAL_NO' TEXT," + // 2: serial_no
                "'SERIAL_BUYDATE' INTEGER," + // 3: serial_buydate
                "'SERIAL_STATE' INTEGER," + // 4: serial_state
                "'SERIAL_SELLDATE' INTEGER," + // 5: serial_selldate
                "'WH_CODE' TEXT," + // 6: wh_code
                "'CUST_CODE' TEXT," + // 7: cust_code
                "'SRC_CODE' TEXT," + // 8: src_code
                "'MARK' INTEGER," + // 9: mark
                "'MODI_BY' TEXT," + // 10: modi_by
                "'MODI_DATE' INTEGER);"); // 11: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ITEM_SERIAL_ITM_CODE ON ITEM_SERIAL" +
                " (ITM_CODE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ITEM_SERIAL_SERIAL_NO ON ITEM_SERIAL" +
                " (SERIAL_NO);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ITEM_SERIAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ItemSerial entity) {
        stmt.clearBindings();
 
        String serial_id = entity.getSerial_id();
        if (serial_id != null) {
            stmt.bindString(1, serial_id);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(2, itm_code);
        }
 
        String serial_no = entity.getSerial_no();
        if (serial_no != null) {
            stmt.bindString(3, serial_no);
        }
 
        java.util.Date serial_buydate = entity.getSerial_buydate();
        if (serial_buydate != null) {
            stmt.bindLong(4, serial_buydate.getTime());
        }
 
        Integer serial_state = entity.getSerial_state();
        if (serial_state != null) {
            stmt.bindLong(5, serial_state);
        }
 
        java.util.Date serial_selldate = entity.getSerial_selldate();
        if (serial_selldate != null) {
            stmt.bindLong(6, serial_selldate.getTime());
        }
 
        String wh_code = entity.getWh_code();
        if (wh_code != null) {
            stmt.bindString(7, wh_code);
        }
 
        String cust_code = entity.getCust_code();
        if (cust_code != null) {
            stmt.bindString(8, cust_code);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(9, src_code);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(10, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(11, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(12, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ItemSerial readEntity(Cursor cursor, int offset) {
        ItemSerial entity = new ItemSerial( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // serial_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itm_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serial_no
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // serial_buydate
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // serial_state
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // serial_selldate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // wh_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cust_code
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // src_code
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // mark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // modi_by
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ItemSerial entity, int offset) {
        entity.setSerial_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setItm_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerial_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSerial_buydate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSerial_state(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSerial_selldate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setWh_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCust_code(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSrc_code(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMark(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setModi_by(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setModi_date(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ItemSerial entity, long rowId) {
        return entity.getSerial_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ItemSerial entity) {
        if(entity != null) {
            return entity.getSerial_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "item_serial_fk1" to-many relationship of Item. */
    public List<ItemSerial> _queryItem_Item_serial_fk1(String itm_code) {
        synchronized (this) {
            if (item_Item_serial_fk1Query == null) {
                QueryBuilder<ItemSerial> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Itm_code.eq(null));
                queryBuilder.orderRaw("SERIAL_ID ASC");
                item_Item_serial_fk1Query = queryBuilder.build();
            }
        }
        Query<ItemSerial> query = item_Item_serial_fk1Query.forCurrentThread();
        query.setParameter(0, itm_code);
        return query.list();
    }

}
