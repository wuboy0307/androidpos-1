package net.pointbridge.android.sales.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUSTOMER.
*/
public class CustomerDao extends AbstractDao<Customer, String> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cust_code = new Property(0, String.class, "cust_code", true, "CUST_CODE");
        public final static Property Cust_name = new Property(1, String.class, "cust_name", false, "CUST_NAME");
        public final static Property Cust_address1 = new Property(2, String.class, "cust_address1", false, "CUST_ADDRESS1");
        public final static Property Cust_address2 = new Property(3, String.class, "cust_address2", false, "CUST_ADDRESS2");
        public final static Property Cust_city = new Property(4, String.class, "cust_city", false, "CUST_CITY");
        public final static Property Cust_prov = new Property(5, String.class, "cust_prov", false, "CUST_PROV");
        public final static Property Cust_country = new Property(6, String.class, "cust_country", false, "CUST_COUNTRY");
        public final static Property Cust_postal = new Property(7, String.class, "cust_postal", false, "CUST_POSTAL");
        public final static Property Cust_email = new Property(8, String.class, "cust_email", false, "CUST_EMAIL");
        public final static Property Cust_phone1 = new Property(9, String.class, "cust_phone1", false, "CUST_PHONE1");
        public final static Property Cust_phone2 = new Property(10, String.class, "cust_phone2", false, "CUST_PHONE2");
        public final static Property Cust_fax = new Property(11, String.class, "cust_fax", false, "CUST_FAX");
        public final static Property Cust_sex = new Property(12, Integer.class, "cust_sex", false, "CUST_SEX");
        public final static Property Cust_active = new Property(13, Integer.class, "cust_active", false, "CUST_ACTIVE");
        public final static Property Cust_taxno = new Property(14, String.class, "cust_taxno", false, "CUST_TAXNO");
        public final static Property Cust_pkpno = new Property(15, String.class, "cust_pkpno", false, "CUST_PKPNO");
        public final static Property Cust_pkpdate = new Property(16, java.util.Date.class, "cust_pkpdate", false, "CUST_PKPDATE");
        public final static Property Ct_code = new Property(17, String.class, "ct_code", false, "CT_CODE");
        public final static Property Src_code = new Property(18, String.class, "src_code", false, "SRC_CODE");
        public final static Property Ori_code = new Property(19, String.class, "ori_code", false, "ORI_CODE");
        public final static Property Mark = new Property(20, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(21, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(22, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private DaoSession daoSession;


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
                "'CUST_CODE' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: cust_code
                "'CUST_NAME' TEXT NOT NULL ," + // 1: cust_name
                "'CUST_ADDRESS1' TEXT," + // 2: cust_address1
                "'CUST_ADDRESS2' TEXT," + // 3: cust_address2
                "'CUST_CITY' TEXT," + // 4: cust_city
                "'CUST_PROV' TEXT," + // 5: cust_prov
                "'CUST_COUNTRY' TEXT," + // 6: cust_country
                "'CUST_POSTAL' TEXT," + // 7: cust_postal
                "'CUST_EMAIL' TEXT," + // 8: cust_email
                "'CUST_PHONE1' TEXT," + // 9: cust_phone1
                "'CUST_PHONE2' TEXT," + // 10: cust_phone2
                "'CUST_FAX' TEXT," + // 11: cust_fax
                "'CUST_SEX' INTEGER," + // 12: cust_sex
                "'CUST_ACTIVE' INTEGER," + // 13: cust_active
                "'CUST_TAXNO' TEXT," + // 14: cust_taxno
                "'CUST_PKPNO' TEXT," + // 15: cust_pkpno
                "'CUST_PKPDATE' INTEGER," + // 16: cust_pkpdate
                "'CT_CODE' TEXT," + // 17: ct_code
                "'SRC_CODE' TEXT," + // 18: src_code
                "'ORI_CODE' TEXT," + // 19: ori_code
                "'MARK' INTEGER," + // 20: mark
                "'MODI_BY' TEXT," + // 21: modi_by
                "'MODI_DATE' INTEGER);"); // 22: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CUSTOMER_CUST_CODE_CUST_NAME ON CUSTOMER" +
                " (CUST_CODE,CUST_NAME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        String cust_code = entity.getCust_code();
        if (cust_code != null) {
            stmt.bindString(1, cust_code);
        }
        stmt.bindString(2, entity.getCust_name());
 
        String cust_address1 = entity.getCust_address1();
        if (cust_address1 != null) {
            stmt.bindString(3, cust_address1);
        }
 
        String cust_address2 = entity.getCust_address2();
        if (cust_address2 != null) {
            stmt.bindString(4, cust_address2);
        }
 
        String cust_city = entity.getCust_city();
        if (cust_city != null) {
            stmt.bindString(5, cust_city);
        }
 
        String cust_prov = entity.getCust_prov();
        if (cust_prov != null) {
            stmt.bindString(6, cust_prov);
        }
 
        String cust_country = entity.getCust_country();
        if (cust_country != null) {
            stmt.bindString(7, cust_country);
        }
 
        String cust_postal = entity.getCust_postal();
        if (cust_postal != null) {
            stmt.bindString(8, cust_postal);
        }
 
        String cust_email = entity.getCust_email();
        if (cust_email != null) {
            stmt.bindString(9, cust_email);
        }
 
        String cust_phone1 = entity.getCust_phone1();
        if (cust_phone1 != null) {
            stmt.bindString(10, cust_phone1);
        }
 
        String cust_phone2 = entity.getCust_phone2();
        if (cust_phone2 != null) {
            stmt.bindString(11, cust_phone2);
        }
 
        String cust_fax = entity.getCust_fax();
        if (cust_fax != null) {
            stmt.bindString(12, cust_fax);
        }
 
        Integer cust_sex = entity.getCust_sex();
        if (cust_sex != null) {
            stmt.bindLong(13, cust_sex);
        }
 
        Integer cust_active = entity.getCust_active();
        if (cust_active != null) {
            stmt.bindLong(14, cust_active);
        }
 
        String cust_taxno = entity.getCust_taxno();
        if (cust_taxno != null) {
            stmt.bindString(15, cust_taxno);
        }
 
        String cust_pkpno = entity.getCust_pkpno();
        if (cust_pkpno != null) {
            stmt.bindString(16, cust_pkpno);
        }
 
        java.util.Date cust_pkpdate = entity.getCust_pkpdate();
        if (cust_pkpdate != null) {
            stmt.bindLong(17, cust_pkpdate.getTime());
        }
 
        String ct_code = entity.getCt_code();
        if (ct_code != null) {
            stmt.bindString(18, ct_code);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(19, src_code);
        }
 
        String ori_code = entity.getOri_code();
        if (ori_code != null) {
            stmt.bindString(20, ori_code);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(21, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(22, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(23, modi_date.getTime());
        }
    }

    @Override
    protected void attachEntity(Customer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cust_code
            cursor.getString(offset + 1), // cust_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cust_address1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cust_address2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cust_city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cust_prov
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cust_country
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cust_postal
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cust_email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cust_phone1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cust_phone2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // cust_fax
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // cust_sex
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // cust_active
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cust_taxno
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cust_pkpno
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // cust_pkpdate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ct_code
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // src_code
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ori_code
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // mark
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // modi_by
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setCust_code(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCust_name(cursor.getString(offset + 1));
        entity.setCust_address1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCust_address2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCust_city(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCust_prov(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCust_country(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCust_postal(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCust_email(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCust_phone1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCust_phone2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCust_fax(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCust_sex(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCust_active(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCust_taxno(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCust_pkpno(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCust_pkpdate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setCt_code(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSrc_code(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOri_code(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMark(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setModi_by(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setModi_date(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Customer entity, long rowId) {
        return entity.getCust_code();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Customer entity) {
        if(entity != null) {
            return entity.getCust_code();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCustomerInfoDao().getAllColumns());
            builder.append(" FROM CUSTOMER T");
            builder.append(" LEFT JOIN CUSTOMER_INFO T0 ON T.'CUST_CODE'=T0.'CI_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Customer loadCurrentDeep(Cursor cursor, boolean lock) {
        Customer entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CustomerInfo customerInfo = loadCurrentOther(daoSession.getCustomerInfoDao(), cursor, offset);
        entity.setCustomerInfo(customerInfo);

        return entity;    
    }

    public Customer loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Customer> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Customer> list = new ArrayList<Customer>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Customer> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Customer> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
