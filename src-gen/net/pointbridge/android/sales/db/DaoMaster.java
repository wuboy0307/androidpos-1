package net.pointbridge.android.sales.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import net.pointbridge.android.sales.db.InboxDao;
import net.pointbridge.android.sales.db.ConfigDao;
import net.pointbridge.android.sales.db.WarehouseDao;
import net.pointbridge.android.sales.db.SalesmanDao;
import net.pointbridge.android.sales.db.ItemDao;
import net.pointbridge.android.sales.db.ItemSerialDao;
import net.pointbridge.android.sales.db.ItemUnitDao;
import net.pointbridge.android.sales.db.ItemBarcodeDao;
import net.pointbridge.android.sales.db.ItemPriceDao;
import net.pointbridge.android.sales.db.CustomerTypeDao;
import net.pointbridge.android.sales.db.CustomerDao;
import net.pointbridge.android.sales.db.CustomerInfoDao;
import net.pointbridge.android.sales.db.TransferMasterDao;
import net.pointbridge.android.sales.db.TransferDetailDao;
import net.pointbridge.android.sales.db.TransferSerialDao;
import net.pointbridge.android.sales.db.MoveMasterDao;
import net.pointbridge.android.sales.db.MoveDetailDao;
import net.pointbridge.android.sales.db.MoveSerialDao;
import net.pointbridge.android.sales.db.SalesMasterDao;
import net.pointbridge.android.sales.db.SalesDetailDao;
import net.pointbridge.android.sales.db.SalesSerialDao;
import net.pointbridge.android.sales.db.SoMasterDao;
import net.pointbridge.android.sales.db.SoDetailDao;
import net.pointbridge.android.sales.db.SrMasterDao;
import net.pointbridge.android.sales.db.SrDetailDao;
import net.pointbridge.android.sales.db.SrSerialDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        InboxDao.createTable(db, ifNotExists);
        ConfigDao.createTable(db, ifNotExists);
        WarehouseDao.createTable(db, ifNotExists);
        SalesmanDao.createTable(db, ifNotExists);
        ItemDao.createTable(db, ifNotExists);
        ItemSerialDao.createTable(db, ifNotExists);
        ItemUnitDao.createTable(db, ifNotExists);
        ItemBarcodeDao.createTable(db, ifNotExists);
        ItemPriceDao.createTable(db, ifNotExists);
        CustomerTypeDao.createTable(db, ifNotExists);
        CustomerDao.createTable(db, ifNotExists);
        CustomerInfoDao.createTable(db, ifNotExists);
        TransferMasterDao.createTable(db, ifNotExists);
        TransferDetailDao.createTable(db, ifNotExists);
        TransferSerialDao.createTable(db, ifNotExists);
        MoveMasterDao.createTable(db, ifNotExists);
        MoveDetailDao.createTable(db, ifNotExists);
        MoveSerialDao.createTable(db, ifNotExists);
        SalesMasterDao.createTable(db, ifNotExists);
        SalesDetailDao.createTable(db, ifNotExists);
        SalesSerialDao.createTable(db, ifNotExists);
        SoMasterDao.createTable(db, ifNotExists);
        SoDetailDao.createTable(db, ifNotExists);
        SrMasterDao.createTable(db, ifNotExists);
        SrDetailDao.createTable(db, ifNotExists);
        SrSerialDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        InboxDao.dropTable(db, ifExists);
        ConfigDao.dropTable(db, ifExists);
        WarehouseDao.dropTable(db, ifExists);
        SalesmanDao.dropTable(db, ifExists);
        ItemDao.dropTable(db, ifExists);
        ItemSerialDao.dropTable(db, ifExists);
        ItemUnitDao.dropTable(db, ifExists);
        ItemBarcodeDao.dropTable(db, ifExists);
        ItemPriceDao.dropTable(db, ifExists);
        CustomerTypeDao.dropTable(db, ifExists);
        CustomerDao.dropTable(db, ifExists);
        CustomerInfoDao.dropTable(db, ifExists);
        TransferMasterDao.dropTable(db, ifExists);
        TransferDetailDao.dropTable(db, ifExists);
        TransferSerialDao.dropTable(db, ifExists);
        MoveMasterDao.dropTable(db, ifExists);
        MoveDetailDao.dropTable(db, ifExists);
        MoveSerialDao.dropTable(db, ifExists);
        SalesMasterDao.dropTable(db, ifExists);
        SalesDetailDao.dropTable(db, ifExists);
        SalesSerialDao.dropTable(db, ifExists);
        SoMasterDao.dropTable(db, ifExists);
        SoDetailDao.dropTable(db, ifExists);
        SrMasterDao.dropTable(db, ifExists);
        SrDetailDao.dropTable(db, ifExists);
        SrSerialDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(InboxDao.class);
        registerDaoClass(ConfigDao.class);
        registerDaoClass(WarehouseDao.class);
        registerDaoClass(SalesmanDao.class);
        registerDaoClass(ItemDao.class);
        registerDaoClass(ItemSerialDao.class);
        registerDaoClass(ItemUnitDao.class);
        registerDaoClass(ItemBarcodeDao.class);
        registerDaoClass(ItemPriceDao.class);
        registerDaoClass(CustomerTypeDao.class);
        registerDaoClass(CustomerDao.class);
        registerDaoClass(CustomerInfoDao.class);
        registerDaoClass(TransferMasterDao.class);
        registerDaoClass(TransferDetailDao.class);
        registerDaoClass(TransferSerialDao.class);
        registerDaoClass(MoveMasterDao.class);
        registerDaoClass(MoveDetailDao.class);
        registerDaoClass(MoveSerialDao.class);
        registerDaoClass(SalesMasterDao.class);
        registerDaoClass(SalesDetailDao.class);
        registerDaoClass(SalesSerialDao.class);
        registerDaoClass(SoMasterDao.class);
        registerDaoClass(SoDetailDao.class);
        registerDaoClass(SrMasterDao.class);
        registerDaoClass(SrDetailDao.class);
        registerDaoClass(SrSerialDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
