package net.pointbridge.android.sales.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ITEM.
*/
public class ItemDao extends AbstractDao<Item, String> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Itm_id = new Property(0, String.class, "itm_id", false, "ITM_ID");
        public final static Property Itm_code = new Property(1, String.class, "itm_code", true, "ITM_CODE");
        public final static Property Itm_name = new Property(2, String.class, "itm_name", false, "ITM_NAME");
        public final static Property Itm_shortname = new Property(3, String.class, "itm_shortname", false, "ITM_SHORTNAME");
        public final static Property Itm_unit = new Property(4, String.class, "itm_unit", false, "ITM_UNIT");
        public final static Property Itm_type = new Property(5, Integer.class, "itm_type", false, "ITM_TYPE");
        public final static Property Itm_source = new Property(6, Integer.class, "itm_source", false, "ITM_SOURCE");
        public final static Property Itm_status = new Property(7, Integer.class, "itm_status", false, "ITM_STATUS");
        public final static Property Itm_slstax = new Property(8, Integer.class, "itm_slstax", false, "ITM_SLSTAX");
        public final static Property Itm_csg = new Property(9, Integer.class, "itm_csg", false, "ITM_CSG");
        public final static Property Itm_min = new Property(10, Float.class, "itm_min", false, "ITM_MIN");
        public final static Property Grp_code = new Property(11, String.class, "grp_code", false, "GRP_CODE");
        public final static Property Sgrp_code = new Property(12, String.class, "sgrp_code", false, "SGRP_CODE");
        public final static Property Vend_code = new Property(13, String.class, "vend_code", false, "VEND_CODE");
        public final static Property Src_code = new Property(14, String.class, "src_code", false, "SRC_CODE");
        public final static Property Itm_serial = new Property(15, Integer.class, "itm_serial", false, "ITM_SERIAL");
        public final static Property Mark = new Property(16, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(17, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(18, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private DaoSession daoSession;


    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ITEM' (" + //
                "'ITM_ID' TEXT," + // 0: itm_id
                "'ITM_CODE' TEXT PRIMARY KEY ASC NOT NULL ," + // 1: itm_code
                "'ITM_NAME' TEXT," + // 2: itm_name
                "'ITM_SHORTNAME' TEXT," + // 3: itm_shortname
                "'ITM_UNIT' TEXT," + // 4: itm_unit
                "'ITM_TYPE' INTEGER," + // 5: itm_type
                "'ITM_SOURCE' INTEGER," + // 6: itm_source
                "'ITM_STATUS' INTEGER," + // 7: itm_status
                "'ITM_SLSTAX' INTEGER," + // 8: itm_slstax
                "'ITM_CSG' INTEGER," + // 9: itm_csg
                "'ITM_MIN' REAL," + // 10: itm_min
                "'GRP_CODE' TEXT," + // 11: grp_code
                "'SGRP_CODE' TEXT," + // 12: sgrp_code
                "'VEND_CODE' TEXT," + // 13: vend_code
                "'SRC_CODE' TEXT," + // 14: src_code
                "'ITM_SERIAL' INTEGER," + // 15: itm_serial
                "'MARK' INTEGER," + // 16: mark
                "'MODI_BY' TEXT," + // 17: modi_by
                "'MODI_DATE' INTEGER);"); // 18: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ITEM_ITM_ID ON ITEM" +
                " (ITM_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ITEM_ITM_NAME ON ITEM" +
                " (ITM_NAME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
 
        String itm_id = entity.getItm_id();
        if (itm_id != null) {
            stmt.bindString(1, itm_id);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(2, itm_code);
        }
 
        String itm_name = entity.getItm_name();
        if (itm_name != null) {
            stmt.bindString(3, itm_name);
        }
 
        String itm_shortname = entity.getItm_shortname();
        if (itm_shortname != null) {
            stmt.bindString(4, itm_shortname);
        }
 
        String itm_unit = entity.getItm_unit();
        if (itm_unit != null) {
            stmt.bindString(5, itm_unit);
        }
 
        Integer itm_type = entity.getItm_type();
        if (itm_type != null) {
            stmt.bindLong(6, itm_type);
        }
 
        Integer itm_source = entity.getItm_source();
        if (itm_source != null) {
            stmt.bindLong(7, itm_source);
        }
 
        Integer itm_status = entity.getItm_status();
        if (itm_status != null) {
            stmt.bindLong(8, itm_status);
        }
 
        Integer itm_slstax = entity.getItm_slstax();
        if (itm_slstax != null) {
            stmt.bindLong(9, itm_slstax);
        }
 
        Integer itm_csg = entity.getItm_csg();
        if (itm_csg != null) {
            stmt.bindLong(10, itm_csg);
        }
 
        Float itm_min = entity.getItm_min();
        if (itm_min != null) {
            stmt.bindDouble(11, itm_min);
        }
 
        String grp_code = entity.getGrp_code();
        if (grp_code != null) {
            stmt.bindString(12, grp_code);
        }
 
        String sgrp_code = entity.getSgrp_code();
        if (sgrp_code != null) {
            stmt.bindString(13, sgrp_code);
        }
 
        String vend_code = entity.getVend_code();
        if (vend_code != null) {
            stmt.bindString(14, vend_code);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(15, src_code);
        }
 
        Integer itm_serial = entity.getItm_serial();
        if (itm_serial != null) {
            stmt.bindLong(16, itm_serial);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(17, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(18, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(19, modi_date.getTime());
        }
    }

    @Override
    protected void attachEntity(Item entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // itm_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itm_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itm_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itm_shortname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // itm_unit
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // itm_type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // itm_source
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // itm_status
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // itm_slstax
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // itm_csg
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // itm_min
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // grp_code
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sgrp_code
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // vend_code
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // src_code
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // itm_serial
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // mark
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // modi_by
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setItm_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setItm_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItm_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItm_shortname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItm_unit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setItm_type(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setItm_source(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setItm_status(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setItm_slstax(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setItm_csg(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setItm_min(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setGrp_code(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSgrp_code(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVend_code(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSrc_code(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setItm_serial(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setMark(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setModi_by(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setModi_date(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Item entity, long rowId) {
        return entity.getItm_code();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Item entity) {
        if(entity != null) {
            return entity.getItm_code();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
