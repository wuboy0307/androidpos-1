package net.pointbridge.android.sales.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.CustomerType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUSTOMER_TYPE.
*/
public class CustomerTypeDao extends AbstractDao<CustomerType, String> {

    public static final String TABLENAME = "CUSTOMER_TYPE";

    /**
     * Properties of entity CustomerType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ct_code = new Property(0, String.class, "ct_code", true, "CT_CODE");
        public final static Property Ct_pricelvl = new Property(1, Integer.class, "ct_pricelvl", false, "CT_PRICELVL");
        public final static Property Ct_discount = new Property(2, Float.class, "ct_discount", false, "CT_DISCOUNT");
        public final static Property Ct_point = new Property(3, Integer.class, "ct_point", false, "CT_POINT");
        public final static Property Src_code = new Property(4, String.class, "src_code", false, "SRC_CODE");
        public final static Property Mark = new Property(5, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(6, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(7, String.class, "modi_date", false, "MODI_DATE");
    };


    public CustomerTypeDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER_TYPE' (" + //
                "'CT_CODE' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: ct_code
                "'CT_PRICELVL' INTEGER," + // 1: ct_pricelvl
                "'CT_DISCOUNT' REAL," + // 2: ct_discount
                "'CT_POINT' INTEGER," + // 3: ct_point
                "'SRC_CODE' TEXT," + // 4: src_code
                "'MARK' INTEGER," + // 5: mark
                "'MODI_BY' TEXT," + // 6: modi_by
                "'MODI_DATE' TEXT);"); // 7: modi_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CustomerType entity) {
        stmt.clearBindings();
 
        String ct_code = entity.getCt_code();
        if (ct_code != null) {
            stmt.bindString(1, ct_code);
        }
 
        Integer ct_pricelvl = entity.getCt_pricelvl();
        if (ct_pricelvl != null) {
            stmt.bindLong(2, ct_pricelvl);
        }
 
        Float ct_discount = entity.getCt_discount();
        if (ct_discount != null) {
            stmt.bindDouble(3, ct_discount);
        }
 
        Integer ct_point = entity.getCt_point();
        if (ct_point != null) {
            stmt.bindLong(4, ct_point);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(5, src_code);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(6, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(7, modi_by);
        }
 
        String modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindString(8, modi_date);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CustomerType readEntity(Cursor cursor, int offset) {
        CustomerType entity = new CustomerType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ct_code
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ct_pricelvl
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // ct_discount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ct_point
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // src_code
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // mark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // modi_by
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CustomerType entity, int offset) {
        entity.setCt_code(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCt_pricelvl(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCt_discount(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setCt_point(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSrc_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMark(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setModi_by(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setModi_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CustomerType entity, long rowId) {
        return entity.getCt_code();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CustomerType entity) {
        if(entity != null) {
            return entity.getCt_code();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
