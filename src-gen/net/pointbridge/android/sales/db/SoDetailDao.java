package net.pointbridge.android.sales.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.pointbridge.android.sales.db.SoDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SO_DETAIL.
*/
public class SoDetailDao extends AbstractDao<SoDetail, String> {

    public static final String TABLENAME = "SO_DETAIL";

    /**
     * Properties of entity SoDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sod_id = new Property(0, String.class, "sod_id", true, "SOD_ID");
        public final static Property So_id = new Property(1, String.class, "so_id", false, "SO_ID");
        public final static Property Itm_code = new Property(2, String.class, "itm_code", false, "ITM_CODE");
        public final static Property Itm_unit = new Property(3, String.class, "itm_unit", false, "ITM_UNIT");
        public final static Property Sod_qty = new Property(4, Float.class, "sod_qty", false, "SOD_QTY");
        public final static Property Sod_price = new Property(5, Float.class, "sod_price", false, "SOD_PRICE");
        public final static Property Sod_disc1 = new Property(6, Float.class, "sod_disc1", false, "SOD_DISC1");
        public final static Property Sod_disc2 = new Property(7, Float.class, "sod_disc2", false, "SOD_DISC2");
        public final static Property Sod_discval = new Property(8, Float.class, "sod_discval", false, "SOD_DISCVAL");
        public final static Property Sod_inctax = new Property(9, Integer.class, "sod_inctax", false, "SOD_INCTAX");
        public final static Property Sod_taxval = new Property(10, Float.class, "sod_taxval", false, "SOD_TAXVAL");
        public final static Property Proc = new Property(11, Integer.class, "proc", false, "PROC");
        public final static Property Astate = new Property(12, Integer.class, "astate", false, "ASTATE");
        public final static Property Locked = new Property(13, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(14, Integer.class, "posted", false, "POSTED");
        public final static Property Src_code = new Property(15, String.class, "src_code", false, "SRC_CODE");
        public final static Property Mark = new Property(16, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(17, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(18, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private Query<SoDetail> soMaster_So_detail_fk1Query;

    public SoDetailDao(DaoConfig config) {
        super(config);
    }
    
    public SoDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SO_DETAIL' (" + //
                "'SOD_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: sod_id
                "'SO_ID' TEXT," + // 1: so_id
                "'ITM_CODE' TEXT," + // 2: itm_code
                "'ITM_UNIT' TEXT," + // 3: itm_unit
                "'SOD_QTY' REAL," + // 4: sod_qty
                "'SOD_PRICE' REAL," + // 5: sod_price
                "'SOD_DISC1' REAL," + // 6: sod_disc1
                "'SOD_DISC2' REAL," + // 7: sod_disc2
                "'SOD_DISCVAL' REAL," + // 8: sod_discval
                "'SOD_INCTAX' INTEGER," + // 9: sod_inctax
                "'SOD_TAXVAL' REAL," + // 10: sod_taxval
                "'PROC' INTEGER," + // 11: proc
                "'ASTATE' INTEGER," + // 12: astate
                "'LOCKED' INTEGER," + // 13: locked
                "'POSTED' INTEGER," + // 14: posted
                "'SRC_CODE' TEXT," + // 15: src_code
                "'MARK' INTEGER," + // 16: mark
                "'MODI_BY' TEXT," + // 17: modi_by
                "'MODI_DATE' INTEGER);"); // 18: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SO_DETAIL_SO_ID ON SO_DETAIL" +
                " (SO_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SO_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SoDetail entity) {
        stmt.clearBindings();
 
        String sod_id = entity.getSod_id();
        if (sod_id != null) {
            stmt.bindString(1, sod_id);
        }
 
        String so_id = entity.getSo_id();
        if (so_id != null) {
            stmt.bindString(2, so_id);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(3, itm_code);
        }
 
        String itm_unit = entity.getItm_unit();
        if (itm_unit != null) {
            stmt.bindString(4, itm_unit);
        }
 
        Float sod_qty = entity.getSod_qty();
        if (sod_qty != null) {
            stmt.bindDouble(5, sod_qty);
        }
 
        Float sod_price = entity.getSod_price();
        if (sod_price != null) {
            stmt.bindDouble(6, sod_price);
        }
 
        Float sod_disc1 = entity.getSod_disc1();
        if (sod_disc1 != null) {
            stmt.bindDouble(7, sod_disc1);
        }
 
        Float sod_disc2 = entity.getSod_disc2();
        if (sod_disc2 != null) {
            stmt.bindDouble(8, sod_disc2);
        }
 
        Float sod_discval = entity.getSod_discval();
        if (sod_discval != null) {
            stmt.bindDouble(9, sod_discval);
        }
 
        Integer sod_inctax = entity.getSod_inctax();
        if (sod_inctax != null) {
            stmt.bindLong(10, sod_inctax);
        }
 
        Float sod_taxval = entity.getSod_taxval();
        if (sod_taxval != null) {
            stmt.bindDouble(11, sod_taxval);
        }
 
        Integer proc = entity.getProc();
        if (proc != null) {
            stmt.bindLong(12, proc);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(13, astate);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(14, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(15, posted);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(16, src_code);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(17, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(18, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(19, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SoDetail readEntity(Cursor cursor, int offset) {
        SoDetail entity = new SoDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sod_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // so_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itm_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itm_unit
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // sod_qty
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // sod_price
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // sod_disc1
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // sod_disc2
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // sod_discval
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sod_inctax
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // sod_taxval
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // proc
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // astate
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // locked
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // posted
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // src_code
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // mark
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // modi_by
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SoDetail entity, int offset) {
        entity.setSod_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSo_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItm_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItm_unit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSod_qty(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setSod_price(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setSod_disc1(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setSod_disc2(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setSod_discval(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setSod_inctax(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setSod_taxval(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setProc(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAstate(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setLocked(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPosted(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setSrc_code(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMark(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setModi_by(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setModi_date(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SoDetail entity, long rowId) {
        return entity.getSod_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SoDetail entity) {
        if(entity != null) {
            return entity.getSod_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "so_detail_fk1" to-many relationship of SoMaster. */
    public List<SoDetail> _querySoMaster_So_detail_fk1(String so_id) {
        synchronized (this) {
            if (soMaster_So_detail_fk1Query == null) {
                QueryBuilder<SoDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.So_id.eq(null));
                queryBuilder.orderRaw("SOD_ID ASC");
                soMaster_So_detail_fk1Query = queryBuilder.build();
            }
        }
        Query<SoDetail> query = soMaster_So_detail_fk1Query.forCurrentThread();
        query.setParameter(0, so_id);
        return query.list();
    }

}
