package net.pointbridge.android.sales.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.pointbridge.android.sales.db.SalesSerial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SALES_SERIAL.
*/
public class SalesSerialDao extends AbstractDao<SalesSerial, Void> {

    public static final String TABLENAME = "SALES_SERIAL";

    /**
     * Properties of entity SalesSerial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ss_id = new Property(0, String.class, "ss_id", false, "SS_ID");
        public final static Property Sd_id = new Property(1, String.class, "sd_id", false, "SD_ID");
        public final static Property Sm_id = new Property(2, String.class, "sm_id", false, "SM_ID");
        public final static Property Itm_code = new Property(3, String.class, "itm_code", false, "ITM_CODE");
        public final static Property Serial_no = new Property(4, String.class, "serial_no", false, "SERIAL_NO");
        public final static Property Src_code = new Property(5, String.class, "src_code", false, "SRC_CODE");
        public final static Property Locked = new Property(6, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(7, Integer.class, "posted", false, "POSTED");
        public final static Property Astate = new Property(8, Integer.class, "astate", false, "ASTATE");
        public final static Property No_seq = new Property(9, Integer.class, "no_seq", false, "NO_SEQ");
        public final static Property Mark = new Property(10, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(11, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(12, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private Query<SalesSerial> salesMaster_Sd_serial_fk1Query;

    public SalesSerialDao(DaoConfig config) {
        super(config);
    }
    
    public SalesSerialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SALES_SERIAL' (" + //
                "'SS_ID' TEXT," + // 0: ss_id
                "'SD_ID' TEXT," + // 1: sd_id
                "'SM_ID' TEXT," + // 2: sm_id
                "'ITM_CODE' TEXT," + // 3: itm_code
                "'SERIAL_NO' TEXT," + // 4: serial_no
                "'SRC_CODE' TEXT," + // 5: src_code
                "'LOCKED' INTEGER," + // 6: locked
                "'POSTED' INTEGER," + // 7: posted
                "'ASTATE' INTEGER," + // 8: astate
                "'NO_SEQ' INTEGER," + // 9: no_seq
                "'MARK' INTEGER," + // 10: mark
                "'MODI_BY' TEXT," + // 11: modi_by
                "'MODI_DATE' INTEGER);"); // 12: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SALES_SERIAL_SS_ID ON SALES_SERIAL" +
                " (SS_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SALES_SERIAL_SD_ID ON SALES_SERIAL" +
                " (SD_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SALES_SERIAL_SM_ID ON SALES_SERIAL" +
                " (SM_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SALES_SERIAL_ITM_CODE ON SALES_SERIAL" +
                " (ITM_CODE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SALES_SERIAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SalesSerial entity) {
        stmt.clearBindings();
 
        String ss_id = entity.getSs_id();
        if (ss_id != null) {
            stmt.bindString(1, ss_id);
        }
 
        String sd_id = entity.getSd_id();
        if (sd_id != null) {
            stmt.bindString(2, sd_id);
        }
 
        String sm_id = entity.getSm_id();
        if (sm_id != null) {
            stmt.bindString(3, sm_id);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(4, itm_code);
        }
 
        String serial_no = entity.getSerial_no();
        if (serial_no != null) {
            stmt.bindString(5, serial_no);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(6, src_code);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(7, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(8, posted);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(9, astate);
        }
 
        Integer no_seq = entity.getNo_seq();
        if (no_seq != null) {
            stmt.bindLong(10, no_seq);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(11, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(12, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(13, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SalesSerial readEntity(Cursor cursor, int offset) {
        SalesSerial entity = new SalesSerial( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ss_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sd_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sm_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itm_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serial_no
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // src_code
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // locked
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // posted
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // astate
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // no_seq
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // mark
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // modi_by
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SalesSerial entity, int offset) {
        entity.setSs_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSd_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSm_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItm_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSerial_no(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSrc_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocked(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPosted(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAstate(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNo_seq(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMark(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setModi_by(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setModi_date(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SalesSerial entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SalesSerial entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sd_serial_fk1" to-many relationship of SalesMaster. */
    public List<SalesSerial> _querySalesMaster_Sd_serial_fk1(String sm_id) {
        synchronized (this) {
            if (salesMaster_Sd_serial_fk1Query == null) {
                QueryBuilder<SalesSerial> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sm_id.eq(null));
                queryBuilder.orderRaw("SS_ID ASC");
                salesMaster_Sd_serial_fk1Query = queryBuilder.build();
            }
        }
        Query<SalesSerial> query = salesMaster_Sd_serial_fk1Query.forCurrentThread();
        query.setParameter(0, sm_id);
        return query.list();
    }

}
