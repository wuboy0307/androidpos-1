package net.pointbridge.android.sales.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.CustomerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUSTOMER_INFO.
*/
public class CustomerInfoDao extends AbstractDao<CustomerInfo, String> {

    public static final String TABLENAME = "CUSTOMER_INFO";

    /**
     * Properties of entity CustomerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ci_id = new Property(0, String.class, "ci_id", true, "CI_ID");
        public final static Property Cust_code = new Property(1, String.class, "cust_code", false, "CUST_CODE");
        public final static Property Ci_ctcperson = new Property(2, String.class, "ci_ctcperson", false, "CI_CTCPERSON");
        public final static Property Src_code = new Property(3, String.class, "src_code", false, "SRC_CODE");
        public final static Property Ori_code = new Property(4, String.class, "ori_code", false, "ORI_CODE");
    };


    public CustomerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER_INFO' (" + //
                "'CI_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: ci_id
                "'CUST_CODE' TEXT," + // 1: cust_code
                "'CI_CTCPERSON' TEXT," + // 2: ci_ctcperson
                "'SRC_CODE' TEXT," + // 3: src_code
                "'ORI_CODE' TEXT);"); // 4: ori_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CustomerInfo entity) {
        stmt.clearBindings();
 
        String ci_id = entity.getCi_id();
        if (ci_id != null) {
            stmt.bindString(1, ci_id);
        }
 
        String cust_code = entity.getCust_code();
        if (cust_code != null) {
            stmt.bindString(2, cust_code);
        }
 
        String ci_ctcperson = entity.getCi_ctcperson();
        if (ci_ctcperson != null) {
            stmt.bindString(3, ci_ctcperson);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(4, src_code);
        }
 
        String ori_code = entity.getOri_code();
        if (ori_code != null) {
            stmt.bindString(5, ori_code);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CustomerInfo readEntity(Cursor cursor, int offset) {
        CustomerInfo entity = new CustomerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ci_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cust_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ci_ctcperson
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // src_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ori_code
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CustomerInfo entity, int offset) {
        entity.setCi_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCust_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCi_ctcperson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSrc_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOri_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CustomerInfo entity, long rowId) {
        return entity.getCi_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CustomerInfo entity) {
        if(entity != null) {
            return entity.getCi_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
