package net.pointbridge.android.sales.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.pointbridge.android.sales.db.SrDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SR_DETAIL.
*/
public class SrDetailDao extends AbstractDao<SrDetail, String> {

    public static final String TABLENAME = "SR_DETAIL";

    /**
     * Properties of entity SrDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Srd_id = new Property(0, String.class, "srd_id", true, "SRD_ID");
        public final static Property Sr_id = new Property(1, String.class, "sr_id", false, "SR_ID");
        public final static Property Sd_id = new Property(2, String.class, "sd_id", false, "SD_ID");
        public final static Property Itm_code = new Property(3, String.class, "itm_code", false, "ITM_CODE");
        public final static Property Itm_unit = new Property(4, String.class, "itm_unit", false, "ITM_UNIT");
        public final static Property Srd_qty = new Property(5, Float.class, "srd_qty", false, "SRD_QTY");
        public final static Property Srd_price = new Property(6, Float.class, "srd_price", false, "SRD_PRICE");
        public final static Property Srd_buyprice = new Property(7, Float.class, "srd_buyprice", false, "SRD_BUYPRICE");
        public final static Property Srd_disc1 = new Property(8, Float.class, "srd_disc1", false, "SRD_DISC1");
        public final static Property Srd_disc2 = new Property(9, Float.class, "srd_disc2", false, "SRD_DISC2");
        public final static Property Srd_discval = new Property(10, Float.class, "srd_discval", false, "SRD_DISCVAL");
        public final static Property Srd_inctax = new Property(11, Integer.class, "srd_inctax", false, "SRD_INCTAX");
        public final static Property Srd_taxval = new Property(12, Float.class, "srd_taxval", false, "SRD_TAXVAL");
        public final static Property Src_code = new Property(13, String.class, "src_code", false, "SRC_CODE");
        public final static Property No_seq = new Property(14, Integer.class, "no_seq", false, "NO_SEQ");
        public final static Property Proc = new Property(15, String.class, "proc", false, "PROC");
        public final static Property Astate = new Property(16, Integer.class, "astate", false, "ASTATE");
        public final static Property Locked = new Property(17, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(18, Integer.class, "posted", false, "POSTED");
        public final static Property Mark = new Property(19, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(20, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(21, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private Query<SrDetail> srMaster_Sr_detail_fk1Query;

    public SrDetailDao(DaoConfig config) {
        super(config);
    }
    
    public SrDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SR_DETAIL' (" + //
                "'SRD_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: srd_id
                "'SR_ID' TEXT," + // 1: sr_id
                "'SD_ID' TEXT," + // 2: sd_id
                "'ITM_CODE' TEXT," + // 3: itm_code
                "'ITM_UNIT' TEXT," + // 4: itm_unit
                "'SRD_QTY' REAL," + // 5: srd_qty
                "'SRD_PRICE' REAL," + // 6: srd_price
                "'SRD_BUYPRICE' REAL," + // 7: srd_buyprice
                "'SRD_DISC1' REAL," + // 8: srd_disc1
                "'SRD_DISC2' REAL," + // 9: srd_disc2
                "'SRD_DISCVAL' REAL," + // 10: srd_discval
                "'SRD_INCTAX' INTEGER," + // 11: srd_inctax
                "'SRD_TAXVAL' REAL," + // 12: srd_taxval
                "'SRC_CODE' TEXT," + // 13: src_code
                "'NO_SEQ' INTEGER," + // 14: no_seq
                "'PROC' TEXT," + // 15: proc
                "'ASTATE' INTEGER," + // 16: astate
                "'LOCKED' INTEGER," + // 17: locked
                "'POSTED' INTEGER," + // 18: posted
                "'MARK' INTEGER," + // 19: mark
                "'MODI_BY' TEXT," + // 20: modi_by
                "'MODI_DATE' INTEGER);"); // 21: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SR_DETAIL_SR_ID ON SR_DETAIL" +
                " (SR_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SR_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SrDetail entity) {
        stmt.clearBindings();
 
        String srd_id = entity.getSrd_id();
        if (srd_id != null) {
            stmt.bindString(1, srd_id);
        }
 
        String sr_id = entity.getSr_id();
        if (sr_id != null) {
            stmt.bindString(2, sr_id);
        }
 
        String sd_id = entity.getSd_id();
        if (sd_id != null) {
            stmt.bindString(3, sd_id);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(4, itm_code);
        }
 
        String itm_unit = entity.getItm_unit();
        if (itm_unit != null) {
            stmt.bindString(5, itm_unit);
        }
 
        Float srd_qty = entity.getSrd_qty();
        if (srd_qty != null) {
            stmt.bindDouble(6, srd_qty);
        }
 
        Float srd_price = entity.getSrd_price();
        if (srd_price != null) {
            stmt.bindDouble(7, srd_price);
        }
 
        Float srd_buyprice = entity.getSrd_buyprice();
        if (srd_buyprice != null) {
            stmt.bindDouble(8, srd_buyprice);
        }
 
        Float srd_disc1 = entity.getSrd_disc1();
        if (srd_disc1 != null) {
            stmt.bindDouble(9, srd_disc1);
        }
 
        Float srd_disc2 = entity.getSrd_disc2();
        if (srd_disc2 != null) {
            stmt.bindDouble(10, srd_disc2);
        }
 
        Float srd_discval = entity.getSrd_discval();
        if (srd_discval != null) {
            stmt.bindDouble(11, srd_discval);
        }
 
        Integer srd_inctax = entity.getSrd_inctax();
        if (srd_inctax != null) {
            stmt.bindLong(12, srd_inctax);
        }
 
        Float srd_taxval = entity.getSrd_taxval();
        if (srd_taxval != null) {
            stmt.bindDouble(13, srd_taxval);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(14, src_code);
        }
 
        Integer no_seq = entity.getNo_seq();
        if (no_seq != null) {
            stmt.bindLong(15, no_seq);
        }
 
        String proc = entity.getProc();
        if (proc != null) {
            stmt.bindString(16, proc);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(17, astate);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(18, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(19, posted);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(20, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(21, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(22, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SrDetail readEntity(Cursor cursor, int offset) {
        SrDetail entity = new SrDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // srd_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sr_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sd_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itm_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // itm_unit
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // srd_qty
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // srd_price
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // srd_buyprice
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // srd_disc1
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // srd_disc2
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // srd_discval
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // srd_inctax
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // srd_taxval
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // src_code
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // no_seq
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // proc
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // astate
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // locked
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // posted
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // mark
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // modi_by
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SrDetail entity, int offset) {
        entity.setSrd_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSr_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSd_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItm_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItm_unit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSrd_qty(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setSrd_price(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setSrd_buyprice(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setSrd_disc1(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setSrd_disc2(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setSrd_discval(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setSrd_inctax(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSrd_taxval(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setSrc_code(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNo_seq(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setProc(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAstate(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setLocked(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setPosted(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setMark(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setModi_by(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setModi_date(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SrDetail entity, long rowId) {
        return entity.getSrd_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SrDetail entity) {
        if(entity != null) {
            return entity.getSrd_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sr_detail_fk1" to-many relationship of SrMaster. */
    public List<SrDetail> _querySrMaster_Sr_detail_fk1(String sr_id) {
        synchronized (this) {
            if (srMaster_Sr_detail_fk1Query == null) {
                QueryBuilder<SrDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sr_id.eq(null));
                queryBuilder.orderRaw("SRD_ID ASC");
                srMaster_Sr_detail_fk1Query = queryBuilder.build();
            }
        }
        Query<SrDetail> query = srMaster_Sr_detail_fk1Query.forCurrentThread();
        query.setParameter(0, sr_id);
        return query.list();
    }

}
