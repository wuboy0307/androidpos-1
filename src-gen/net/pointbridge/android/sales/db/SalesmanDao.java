package net.pointbridge.android.sales.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.Salesman;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SALESMAN.
*/
public class SalesmanDao extends AbstractDao<Salesman, String> {

    public static final String TABLENAME = "SALESMAN";

    /**
     * Properties of entity Salesman.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Slm_code = new Property(0, String.class, "slm_code", true, "SLM_CODE");
        public final static Property Slm_name = new Property(1, String.class, "slm_name", false, "SLM_NAME");
        public final static Property Slm_address1 = new Property(2, String.class, "slm_address1", false, "SLM_ADDRESS1");
        public final static Property Slm_address2 = new Property(3, String.class, "slm_address2", false, "SLM_ADDRESS2");
        public final static Property Slm_city = new Property(4, String.class, "slm_city", false, "SLM_CITY");
        public final static Property Slm_prov = new Property(5, String.class, "slm_prov", false, "SLM_PROV");
        public final static Property Slm_country = new Property(6, String.class, "slm_country", false, "SLM_COUNTRY");
        public final static Property Slm_email = new Property(7, String.class, "slm_email", false, "SLM_EMAIL");
        public final static Property Slm_phone1 = new Property(8, String.class, "slm_phone1", false, "SLM_PHONE1");
        public final static Property Slm_phone2 = new Property(9, String.class, "slm_phone2", false, "SLM_PHONE2");
        public final static Property Slm_postal = new Property(10, String.class, "slm_postal", false, "SLM_POSTAL");
        public final static Property Slm_fax = new Property(11, String.class, "slm_fax", false, "SLM_FAX");
        public final static Property Slm_active = new Property(12, Integer.class, "slm_active", false, "SLM_ACTIVE");
        public final static Property Brc_code = new Property(13, String.class, "brc_code", false, "BRC_CODE");
        public final static Property Src_code = new Property(14, String.class, "src_code", false, "SRC_CODE");
        public final static Property Mark = new Property(15, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(16, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(17, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };


    public SalesmanDao(DaoConfig config) {
        super(config);
    }
    
    public SalesmanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SALESMAN' (" + //
                "'SLM_CODE' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: slm_code
                "'SLM_NAME' TEXT," + // 1: slm_name
                "'SLM_ADDRESS1' TEXT," + // 2: slm_address1
                "'SLM_ADDRESS2' TEXT," + // 3: slm_address2
                "'SLM_CITY' TEXT," + // 4: slm_city
                "'SLM_PROV' TEXT," + // 5: slm_prov
                "'SLM_COUNTRY' TEXT," + // 6: slm_country
                "'SLM_EMAIL' TEXT," + // 7: slm_email
                "'SLM_PHONE1' TEXT," + // 8: slm_phone1
                "'SLM_PHONE2' TEXT," + // 9: slm_phone2
                "'SLM_POSTAL' TEXT," + // 10: slm_postal
                "'SLM_FAX' TEXT," + // 11: slm_fax
                "'SLM_ACTIVE' INTEGER," + // 12: slm_active
                "'BRC_CODE' TEXT," + // 13: brc_code
                "'SRC_CODE' TEXT," + // 14: src_code
                "'MARK' INTEGER," + // 15: mark
                "'MODI_BY' TEXT," + // 16: modi_by
                "'MODI_DATE' INTEGER);"); // 17: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SALESMAN_SLM_NAME ON SALESMAN" +
                " (SLM_NAME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SALESMAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Salesman entity) {
        stmt.clearBindings();
 
        String slm_code = entity.getSlm_code();
        if (slm_code != null) {
            stmt.bindString(1, slm_code);
        }
 
        String slm_name = entity.getSlm_name();
        if (slm_name != null) {
            stmt.bindString(2, slm_name);
        }
 
        String slm_address1 = entity.getSlm_address1();
        if (slm_address1 != null) {
            stmt.bindString(3, slm_address1);
        }
 
        String slm_address2 = entity.getSlm_address2();
        if (slm_address2 != null) {
            stmt.bindString(4, slm_address2);
        }
 
        String slm_city = entity.getSlm_city();
        if (slm_city != null) {
            stmt.bindString(5, slm_city);
        }
 
        String slm_prov = entity.getSlm_prov();
        if (slm_prov != null) {
            stmt.bindString(6, slm_prov);
        }
 
        String slm_country = entity.getSlm_country();
        if (slm_country != null) {
            stmt.bindString(7, slm_country);
        }
 
        String slm_email = entity.getSlm_email();
        if (slm_email != null) {
            stmt.bindString(8, slm_email);
        }
 
        String slm_phone1 = entity.getSlm_phone1();
        if (slm_phone1 != null) {
            stmt.bindString(9, slm_phone1);
        }
 
        String slm_phone2 = entity.getSlm_phone2();
        if (slm_phone2 != null) {
            stmt.bindString(10, slm_phone2);
        }
 
        String slm_postal = entity.getSlm_postal();
        if (slm_postal != null) {
            stmt.bindString(11, slm_postal);
        }
 
        String slm_fax = entity.getSlm_fax();
        if (slm_fax != null) {
            stmt.bindString(12, slm_fax);
        }
 
        Integer slm_active = entity.getSlm_active();
        if (slm_active != null) {
            stmt.bindLong(13, slm_active);
        }
 
        String brc_code = entity.getBrc_code();
        if (brc_code != null) {
            stmt.bindString(14, brc_code);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(15, src_code);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(16, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(17, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(18, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Salesman readEntity(Cursor cursor, int offset) {
        Salesman entity = new Salesman( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // slm_code
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // slm_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // slm_address1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // slm_address2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // slm_city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // slm_prov
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // slm_country
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // slm_email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // slm_phone1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // slm_phone2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // slm_postal
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // slm_fax
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // slm_active
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // brc_code
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // src_code
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // mark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modi_by
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Salesman entity, int offset) {
        entity.setSlm_code(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSlm_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSlm_address1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSlm_address2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSlm_city(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSlm_prov(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSlm_country(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSlm_email(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSlm_phone1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSlm_phone2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSlm_postal(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSlm_fax(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSlm_active(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setBrc_code(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSrc_code(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMark(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setModi_by(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setModi_date(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Salesman entity, long rowId) {
        return entity.getSlm_code();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Salesman entity) {
        if(entity != null) {
            return entity.getSlm_code();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
