package net.pointbridge.android.sales.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.pointbridge.android.sales.db.ItemBarcode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ITEM_BARCODE.
*/
public class ItemBarcodeDao extends AbstractDao<ItemBarcode, String> {

    public static final String TABLENAME = "ITEM_BARCODE";

    /**
     * Properties of entity ItemBarcode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Itb_id = new Property(0, String.class, "itb_id", true, "ITB_ID");
        public final static Property Itm_code = new Property(1, String.class, "itm_code", false, "ITM_CODE");
        public final static Property Itm_unit = new Property(2, String.class, "itm_unit", false, "ITM_UNIT");
        public final static Property Itb_barcode = new Property(3, String.class, "itb_barcode", false, "ITB_BARCODE");
        public final static Property Src_code = new Property(4, String.class, "src_code", false, "SRC_CODE");
        public final static Property Mark = new Property(5, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(6, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(7, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private Query<ItemBarcode> item_Item_barcode_fk1Query;

    public ItemBarcodeDao(DaoConfig config) {
        super(config);
    }
    
    public ItemBarcodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ITEM_BARCODE' (" + //
                "'ITB_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: itb_id
                "'ITM_CODE' TEXT," + // 1: itm_code
                "'ITM_UNIT' TEXT," + // 2: itm_unit
                "'ITB_BARCODE' TEXT," + // 3: itb_barcode
                "'SRC_CODE' TEXT," + // 4: src_code
                "'MARK' INTEGER," + // 5: mark
                "'MODI_BY' TEXT," + // 6: modi_by
                "'MODI_DATE' INTEGER);"); // 7: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ITEM_BARCODE_ITM_CODE ON ITEM_BARCODE" +
                " (ITM_CODE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_ITEM_BARCODE_ITB_BARCODE ON ITEM_BARCODE" +
                " (ITB_BARCODE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ITEM_BARCODE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ItemBarcode entity) {
        stmt.clearBindings();
 
        String itb_id = entity.getItb_id();
        if (itb_id != null) {
            stmt.bindString(1, itb_id);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(2, itm_code);
        }
 
        String itm_unit = entity.getItm_unit();
        if (itm_unit != null) {
            stmt.bindString(3, itm_unit);
        }
 
        String itb_barcode = entity.getItb_barcode();
        if (itb_barcode != null) {
            stmt.bindString(4, itb_barcode);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(5, src_code);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(6, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(7, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(8, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ItemBarcode readEntity(Cursor cursor, int offset) {
        ItemBarcode entity = new ItemBarcode( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // itb_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itm_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itm_unit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itb_barcode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // src_code
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // mark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // modi_by
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ItemBarcode entity, int offset) {
        entity.setItb_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setItm_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItm_unit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItb_barcode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSrc_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMark(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setModi_by(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setModi_date(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ItemBarcode entity, long rowId) {
        return entity.getItb_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ItemBarcode entity) {
        if(entity != null) {
            return entity.getItb_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "item_barcode_fk1" to-many relationship of Item. */
    public List<ItemBarcode> _queryItem_Item_barcode_fk1(String itm_code) {
        synchronized (this) {
            if (item_Item_barcode_fk1Query == null) {
                QueryBuilder<ItemBarcode> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Itm_code.eq(null));
                queryBuilder.orderRaw("ITB_BARCODE ASC");
                item_Item_barcode_fk1Query = queryBuilder.build();
            }
        }
        Query<ItemBarcode> query = item_Item_barcode_fk1Query.forCurrentThread();
        query.setParameter(0, itm_code);
        return query.list();
    }

}
