package net.pointbridge.android.sales.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.pointbridge.android.sales.db.MoveDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOVE_DETAIL.
*/
public class MoveDetailDao extends AbstractDao<MoveDetail, String> {

    public static final String TABLENAME = "MOVE_DETAIL";

    /**
     * Properties of entity MoveDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Md_id = new Property(0, String.class, "md_id", true, "MD_ID");
        public final static Property Mm_id = new Property(1, String.class, "mm_id", false, "MM_ID");
        public final static Property Td_id = new Property(2, String.class, "td_id", false, "TD_ID");
        public final static Property Pod_id = new Property(3, String.class, "pod_id", false, "POD_ID");
        public final static Property Po_no = new Property(4, String.class, "po_no", false, "PO_NO");
        public final static Property Tm_no = new Property(5, String.class, "tm_no", false, "TM_NO");
        public final static Property Itm_code = new Property(6, String.class, "itm_code", false, "ITM_CODE");
        public final static Property Itm_unit = new Property(7, String.class, "itm_unit", false, "ITM_UNIT");
        public final static Property Md_qty = new Property(8, Float.class, "md_qty", false, "MD_QTY");
        public final static Property Md_buyprice = new Property(9, Float.class, "md_buyprice", false, "MD_BUYPRICE");
        public final static Property Md_sellprice = new Property(10, Float.class, "md_sellprice", false, "MD_SELLPRICE");
        public final static Property Src_code = new Property(11, String.class, "src_code", false, "SRC_CODE");
        public final static Property No_seq = new Property(12, String.class, "no_seq", false, "NO_SEQ");
        public final static Property Proc = new Property(13, Integer.class, "proc", false, "PROC");
        public final static Property Astate = new Property(14, Integer.class, "astate", false, "ASTATE");
        public final static Property Locked = new Property(15, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(16, Integer.class, "posted", false, "POSTED");
        public final static Property Mark = new Property(17, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(18, Integer.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(19, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private Query<MoveDetail> moveMaster_Mv_detail_fk1Query;

    public MoveDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MoveDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOVE_DETAIL' (" + //
                "'MD_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: md_id
                "'MM_ID' TEXT," + // 1: mm_id
                "'TD_ID' TEXT," + // 2: td_id
                "'POD_ID' TEXT," + // 3: pod_id
                "'PO_NO' TEXT," + // 4: po_no
                "'TM_NO' TEXT," + // 5: tm_no
                "'ITM_CODE' TEXT," + // 6: itm_code
                "'ITM_UNIT' TEXT," + // 7: itm_unit
                "'MD_QTY' REAL," + // 8: md_qty
                "'MD_BUYPRICE' REAL," + // 9: md_buyprice
                "'MD_SELLPRICE' REAL," + // 10: md_sellprice
                "'SRC_CODE' TEXT," + // 11: src_code
                "'NO_SEQ' TEXT," + // 12: no_seq
                "'PROC' INTEGER," + // 13: proc
                "'ASTATE' INTEGER," + // 14: astate
                "'LOCKED' INTEGER," + // 15: locked
                "'POSTED' INTEGER," + // 16: posted
                "'MARK' INTEGER," + // 17: mark
                "'MODI_BY' INTEGER," + // 18: modi_by
                "'MODI_DATE' INTEGER);"); // 19: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOVE_DETAIL_MM_ID ON MOVE_DETAIL" +
                " (MM_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOVE_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MoveDetail entity) {
        stmt.clearBindings();
 
        String md_id = entity.getMd_id();
        if (md_id != null) {
            stmt.bindString(1, md_id);
        }
 
        String mm_id = entity.getMm_id();
        if (mm_id != null) {
            stmt.bindString(2, mm_id);
        }
 
        String td_id = entity.getTd_id();
        if (td_id != null) {
            stmt.bindString(3, td_id);
        }
 
        String pod_id = entity.getPod_id();
        if (pod_id != null) {
            stmt.bindString(4, pod_id);
        }
 
        String po_no = entity.getPo_no();
        if (po_no != null) {
            stmt.bindString(5, po_no);
        }
 
        String tm_no = entity.getTm_no();
        if (tm_no != null) {
            stmt.bindString(6, tm_no);
        }
 
        String itm_code = entity.getItm_code();
        if (itm_code != null) {
            stmt.bindString(7, itm_code);
        }
 
        String itm_unit = entity.getItm_unit();
        if (itm_unit != null) {
            stmt.bindString(8, itm_unit);
        }
 
        Float md_qty = entity.getMd_qty();
        if (md_qty != null) {
            stmt.bindDouble(9, md_qty);
        }
 
        Float md_buyprice = entity.getMd_buyprice();
        if (md_buyprice != null) {
            stmt.bindDouble(10, md_buyprice);
        }
 
        Float md_sellprice = entity.getMd_sellprice();
        if (md_sellprice != null) {
            stmt.bindDouble(11, md_sellprice);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(12, src_code);
        }
 
        String no_seq = entity.getNo_seq();
        if (no_seq != null) {
            stmt.bindString(13, no_seq);
        }
 
        Integer proc = entity.getProc();
        if (proc != null) {
            stmt.bindLong(14, proc);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(15, astate);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(16, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(17, posted);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(18, mark);
        }
 
        Integer modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindLong(19, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(20, modi_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MoveDetail readEntity(Cursor cursor, int offset) {
        MoveDetail entity = new MoveDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // md_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mm_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // td_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pod_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // po_no
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tm_no
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // itm_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // itm_unit
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // md_qty
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // md_buyprice
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // md_sellprice
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // src_code
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // no_seq
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // proc
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // astate
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // locked
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // posted
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // mark
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // modi_by
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MoveDetail entity, int offset) {
        entity.setMd_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMm_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTd_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPod_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPo_no(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTm_no(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItm_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setItm_unit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMd_qty(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setMd_buyprice(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setMd_sellprice(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setSrc_code(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNo_seq(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProc(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setAstate(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setLocked(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setPosted(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setMark(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setModi_by(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setModi_date(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MoveDetail entity, long rowId) {
        return entity.getMd_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MoveDetail entity) {
        if(entity != null) {
            return entity.getMd_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mv_detail_fk1" to-many relationship of MoveMaster. */
    public List<MoveDetail> _queryMoveMaster_Mv_detail_fk1(String mm_id) {
        synchronized (this) {
            if (moveMaster_Mv_detail_fk1Query == null) {
                QueryBuilder<MoveDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Mm_id.eq(null));
                queryBuilder.orderRaw("MD_ID ASC");
                moveMaster_Mv_detail_fk1Query = queryBuilder.build();
            }
        }
        Query<MoveDetail> query = moveMaster_Mv_detail_fk1Query.forCurrentThread();
        query.setParameter(0, mm_id);
        return query.list();
    }

}
