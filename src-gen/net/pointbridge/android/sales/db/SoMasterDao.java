package net.pointbridge.android.sales.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.SoMaster;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SO_MASTER.
*/
public class SoMasterDao extends AbstractDao<SoMaster, String> {

    public static final String TABLENAME = "SO_MASTER";

    /**
     * Properties of entity SoMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property So_id = new Property(0, String.class, "so_id", true, "SO_ID");
        public final static Property So_no = new Property(1, String.class, "so_no", false, "SO_NO");
        public final static Property So_date = new Property(2, java.util.Date.class, "so_date", false, "SO_DATE");
        public final static Property Cust_code = new Property(3, String.class, "cust_code", false, "CUST_CODE");
        public final static Property Slm_code = new Property(4, String.class, "slm_code", false, "SLM_CODE");
        public final static Property Curr_code = new Property(5, String.class, "curr_code", false, "CURR_CODE");
        public final static Property So_totqty = new Property(6, Float.class, "so_totqty", false, "SO_TOTQTY");
        public final static Property So_subtotal = new Property(7, Float.class, "so_subtotal", false, "SO_SUBTOTAL");
        public final static Property So_tottax = new Property(8, Float.class, "so_tottax", false, "SO_TOTTAX");
        public final static Property So_discval = new Property(9, Float.class, "so_discval", false, "SO_DISCVAL");
        public final static Property So_disc1 = new Property(10, Float.class, "so_disc1", false, "SO_DISC1");
        public final static Property So_disc2 = new Property(11, Float.class, "so_disc2", false, "SO_DISC2");
        public final static Property So_disc3 = new Property(12, Float.class, "so_disc3", false, "SO_DISC3");
        public final static Property So_shipcost = new Property(13, Float.class, "so_shipcost", false, "SO_SHIPCOST");
        public final static Property So_shipweight = new Property(14, Float.class, "so_shipweight", false, "SO_SHIPWEIGHT");
        public final static Property So_othercost = new Property(15, Float.class, "so_othercost", false, "SO_OTHERCOST");
        public final static Property So_total = new Property(16, Float.class, "so_total", false, "SO_TOTAL");
        public final static Property So_totalgross = new Property(17, Integer.class, "so_totalgross", false, "SO_TOTALGROSS");
        public final static Property Astate = new Property(18, Integer.class, "astate", false, "ASTATE");
        public final static Property Locked = new Property(19, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(20, Integer.class, "posted", false, "POSTED");
        public final static Property So_inctax = new Property(21, Integer.class, "so_inctax", false, "SO_INCTAX");
        public final static Property Allproc = new Property(22, Integer.class, "allproc", false, "ALLPROC");
        public final static Property Src_code = new Property(23, Integer.class, "src_code", false, "SRC_CODE");
        public final static Property Mark = new Property(24, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(25, Integer.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(26, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private DaoSession daoSession;


    public SoMasterDao(DaoConfig config) {
        super(config);
    }
    
    public SoMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SO_MASTER' (" + //
                "'SO_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: so_id
                "'SO_NO' TEXT," + // 1: so_no
                "'SO_DATE' INTEGER," + // 2: so_date
                "'CUST_CODE' TEXT," + // 3: cust_code
                "'SLM_CODE' TEXT," + // 4: slm_code
                "'CURR_CODE' TEXT," + // 5: curr_code
                "'SO_TOTQTY' REAL," + // 6: so_totqty
                "'SO_SUBTOTAL' REAL," + // 7: so_subtotal
                "'SO_TOTTAX' REAL," + // 8: so_tottax
                "'SO_DISCVAL' REAL," + // 9: so_discval
                "'SO_DISC1' REAL," + // 10: so_disc1
                "'SO_DISC2' REAL," + // 11: so_disc2
                "'SO_DISC3' REAL," + // 12: so_disc3
                "'SO_SHIPCOST' REAL," + // 13: so_shipcost
                "'SO_SHIPWEIGHT' REAL," + // 14: so_shipweight
                "'SO_OTHERCOST' REAL," + // 15: so_othercost
                "'SO_TOTAL' REAL," + // 16: so_total
                "'SO_TOTALGROSS' INTEGER," + // 17: so_totalgross
                "'ASTATE' INTEGER," + // 18: astate
                "'LOCKED' INTEGER," + // 19: locked
                "'POSTED' INTEGER," + // 20: posted
                "'SO_INCTAX' INTEGER," + // 21: so_inctax
                "'ALLPROC' INTEGER," + // 22: allproc
                "'SRC_CODE' INTEGER," + // 23: src_code
                "'MARK' INTEGER," + // 24: mark
                "'MODI_BY' INTEGER," + // 25: modi_by
                "'MODI_DATE' INTEGER);"); // 26: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SO_MASTER_SO_NO ON SO_MASTER" +
                " (SO_NO);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SO_MASTER_CUST_CODE ON SO_MASTER" +
                " (CUST_CODE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SO_MASTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SoMaster entity) {
        stmt.clearBindings();
 
        String so_id = entity.getSo_id();
        if (so_id != null) {
            stmt.bindString(1, so_id);
        }
 
        String so_no = entity.getSo_no();
        if (so_no != null) {
            stmt.bindString(2, so_no);
        }
 
        java.util.Date so_date = entity.getSo_date();
        if (so_date != null) {
            stmt.bindLong(3, so_date.getTime());
        }
 
        String cust_code = entity.getCust_code();
        if (cust_code != null) {
            stmt.bindString(4, cust_code);
        }
 
        String slm_code = entity.getSlm_code();
        if (slm_code != null) {
            stmt.bindString(5, slm_code);
        }
 
        String curr_code = entity.getCurr_code();
        if (curr_code != null) {
            stmt.bindString(6, curr_code);
        }
 
        Float so_totqty = entity.getSo_totqty();
        if (so_totqty != null) {
            stmt.bindDouble(7, so_totqty);
        }
 
        Float so_subtotal = entity.getSo_subtotal();
        if (so_subtotal != null) {
            stmt.bindDouble(8, so_subtotal);
        }
 
        Float so_tottax = entity.getSo_tottax();
        if (so_tottax != null) {
            stmt.bindDouble(9, so_tottax);
        }
 
        Float so_discval = entity.getSo_discval();
        if (so_discval != null) {
            stmt.bindDouble(10, so_discval);
        }
 
        Float so_disc1 = entity.getSo_disc1();
        if (so_disc1 != null) {
            stmt.bindDouble(11, so_disc1);
        }
 
        Float so_disc2 = entity.getSo_disc2();
        if (so_disc2 != null) {
            stmt.bindDouble(12, so_disc2);
        }
 
        Float so_disc3 = entity.getSo_disc3();
        if (so_disc3 != null) {
            stmt.bindDouble(13, so_disc3);
        }
 
        Float so_shipcost = entity.getSo_shipcost();
        if (so_shipcost != null) {
            stmt.bindDouble(14, so_shipcost);
        }
 
        Float so_shipweight = entity.getSo_shipweight();
        if (so_shipweight != null) {
            stmt.bindDouble(15, so_shipweight);
        }
 
        Float so_othercost = entity.getSo_othercost();
        if (so_othercost != null) {
            stmt.bindDouble(16, so_othercost);
        }
 
        Float so_total = entity.getSo_total();
        if (so_total != null) {
            stmt.bindDouble(17, so_total);
        }
 
        Integer so_totalgross = entity.getSo_totalgross();
        if (so_totalgross != null) {
            stmt.bindLong(18, so_totalgross);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(19, astate);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(20, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(21, posted);
        }
 
        Integer so_inctax = entity.getSo_inctax();
        if (so_inctax != null) {
            stmt.bindLong(22, so_inctax);
        }
 
        Integer allproc = entity.getAllproc();
        if (allproc != null) {
            stmt.bindLong(23, allproc);
        }
 
        Integer src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindLong(24, src_code);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(25, mark);
        }
 
        Integer modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindLong(26, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(27, modi_date.getTime());
        }
    }

    @Override
    protected void attachEntity(SoMaster entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SoMaster readEntity(Cursor cursor, int offset) {
        SoMaster entity = new SoMaster( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // so_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // so_no
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // so_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cust_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // slm_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // curr_code
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // so_totqty
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // so_subtotal
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // so_tottax
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // so_discval
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // so_disc1
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // so_disc2
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // so_disc3
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // so_shipcost
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // so_shipweight
            cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15), // so_othercost
            cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16), // so_total
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // so_totalgross
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // astate
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // locked
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // posted
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // so_inctax
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // allproc
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // src_code
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // mark
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // modi_by
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SoMaster entity, int offset) {
        entity.setSo_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSo_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSo_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCust_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSlm_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurr_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSo_totqty(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setSo_subtotal(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setSo_tottax(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setSo_discval(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setSo_disc1(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setSo_disc2(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setSo_disc3(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setSo_shipcost(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setSo_shipweight(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setSo_othercost(cursor.isNull(offset + 15) ? null : cursor.getFloat(offset + 15));
        entity.setSo_total(cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16));
        entity.setSo_totalgross(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setAstate(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setLocked(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setPosted(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setSo_inctax(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setAllproc(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setSrc_code(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setMark(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setModi_by(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setModi_date(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SoMaster entity, long rowId) {
        return entity.getSo_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SoMaster entity) {
        if(entity != null) {
            return entity.getSo_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
