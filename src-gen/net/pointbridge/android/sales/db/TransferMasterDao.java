package net.pointbridge.android.sales.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.TransferMaster;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRANSFER_MASTER.
*/
public class TransferMasterDao extends AbstractDao<TransferMaster, String> {

    public static final String TABLENAME = "TRANSFER_MASTER";

    /**
     * Properties of entity TransferMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tm_id = new Property(0, String.class, "tm_id", true, "TM_ID");
        public final static Property Tm_no = new Property(1, String.class, "tm_no", false, "TM_NO");
        public final static Property Tm_date = new Property(2, java.util.Date.class, "tm_date", false, "TM_DATE");
        public final static Property Tm_wh_src = new Property(3, String.class, "tm_wh_src", false, "TM_WH_SRC");
        public final static Property Tm_wh_tgt = new Property(4, String.class, "tm_wh_tgt", false, "TM_WH_TGT");
        public final static Property Tm_totqty = new Property(5, Float.class, "tm_totqty", false, "TM_TOTQTY");
        public final static Property Tm_totbuyprice = new Property(6, Float.class, "tm_totbuyprice", false, "TM_TOTBUYPRICE");
        public final static Property Tm_totsellprice = new Property(7, Float.class, "tm_totsellprice", false, "TM_TOTSELLPRICE");
        public final static Property Tm_note = new Property(8, String.class, "tm_note", false, "TM_NOTE");
        public final static Property Tm_totpack = new Property(9, String.class, "tm_totpack", false, "TM_TOTPACK");
        public final static Property Src_code = new Property(10, String.class, "src_code", false, "SRC_CODE");
        public final static Property Astate = new Property(11, Integer.class, "astate", false, "ASTATE");
        public final static Property Locked = new Property(12, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(13, Integer.class, "posted", false, "POSTED");
        public final static Property Mark = new Property(14, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(15, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(16, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private DaoSession daoSession;


    public TransferMasterDao(DaoConfig config) {
        super(config);
    }
    
    public TransferMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSFER_MASTER' (" + //
                "'TM_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: tm_id
                "'TM_NO' TEXT," + // 1: tm_no
                "'TM_DATE' INTEGER," + // 2: tm_date
                "'TM_WH_SRC' TEXT," + // 3: tm_wh_src
                "'TM_WH_TGT' TEXT," + // 4: tm_wh_tgt
                "'TM_TOTQTY' REAL," + // 5: tm_totqty
                "'TM_TOTBUYPRICE' REAL," + // 6: tm_totbuyprice
                "'TM_TOTSELLPRICE' REAL," + // 7: tm_totsellprice
                "'TM_NOTE' TEXT," + // 8: tm_note
                "'TM_TOTPACK' TEXT," + // 9: tm_totpack
                "'SRC_CODE' TEXT," + // 10: src_code
                "'ASTATE' INTEGER," + // 11: astate
                "'LOCKED' INTEGER," + // 12: locked
                "'POSTED' INTEGER," + // 13: posted
                "'MARK' INTEGER," + // 14: mark
                "'MODI_BY' TEXT," + // 15: modi_by
                "'MODI_DATE' INTEGER);"); // 16: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSFER_MASTER_TM_NO ON TRANSFER_MASTER" +
                " (TM_NO);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRANSFER_MASTER_TM_DATE ON TRANSFER_MASTER" +
                " (TM_DATE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSFER_MASTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TransferMaster entity) {
        stmt.clearBindings();
 
        String tm_id = entity.getTm_id();
        if (tm_id != null) {
            stmt.bindString(1, tm_id);
        }
 
        String tm_no = entity.getTm_no();
        if (tm_no != null) {
            stmt.bindString(2, tm_no);
        }
 
        java.util.Date tm_date = entity.getTm_date();
        if (tm_date != null) {
            stmt.bindLong(3, tm_date.getTime());
        }
 
        String tm_wh_src = entity.getTm_wh_src();
        if (tm_wh_src != null) {
            stmt.bindString(4, tm_wh_src);
        }
 
        String tm_wh_tgt = entity.getTm_wh_tgt();
        if (tm_wh_tgt != null) {
            stmt.bindString(5, tm_wh_tgt);
        }
 
        Float tm_totqty = entity.getTm_totqty();
        if (tm_totqty != null) {
            stmt.bindDouble(6, tm_totqty);
        }
 
        Float tm_totbuyprice = entity.getTm_totbuyprice();
        if (tm_totbuyprice != null) {
            stmt.bindDouble(7, tm_totbuyprice);
        }
 
        Float tm_totsellprice = entity.getTm_totsellprice();
        if (tm_totsellprice != null) {
            stmt.bindDouble(8, tm_totsellprice);
        }
 
        String tm_note = entity.getTm_note();
        if (tm_note != null) {
            stmt.bindString(9, tm_note);
        }
 
        String tm_totpack = entity.getTm_totpack();
        if (tm_totpack != null) {
            stmt.bindString(10, tm_totpack);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(11, src_code);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(12, astate);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(13, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(14, posted);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(15, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(16, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(17, modi_date.getTime());
        }
    }

    @Override
    protected void attachEntity(TransferMaster entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TransferMaster readEntity(Cursor cursor, int offset) {
        TransferMaster entity = new TransferMaster( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tm_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tm_no
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // tm_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tm_wh_src
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tm_wh_tgt
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // tm_totqty
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // tm_totbuyprice
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // tm_totsellprice
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tm_note
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tm_totpack
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // src_code
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // astate
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // locked
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // posted
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // mark
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // modi_by
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TransferMaster entity, int offset) {
        entity.setTm_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTm_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTm_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTm_wh_src(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTm_wh_tgt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTm_totqty(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setTm_totbuyprice(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setTm_totsellprice(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setTm_note(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTm_totpack(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSrc_code(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAstate(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setLocked(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setPosted(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setMark(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setModi_by(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setModi_date(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TransferMaster entity, long rowId) {
        return entity.getTm_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TransferMaster entity) {
        if(entity != null) {
            return entity.getTm_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
