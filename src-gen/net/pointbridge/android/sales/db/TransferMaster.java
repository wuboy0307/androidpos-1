package net.pointbridge.android.sales.db;

import java.util.List;
import net.pointbridge.android.sales.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TRANSFER_MASTER.
 */
public class TransferMaster {

    private String tm_id;
    private String tm_no;
    private java.util.Date tm_date;
    private String tm_wh_src;
    private String tm_wh_tgt;
    private Float tm_totqty;
    private Float tm_totbuyprice;
    private Float tm_totsellprice;
    private String tm_note;
    private String tm_totpack;
    private String src_code;
    private Integer astate;
    private Integer locked;
    private Integer posted;
    private Integer mark;
    private String modi_by;
    private java.util.Date modi_date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TransferMasterDao myDao;

    private List<TransferDetail> tr_detail_fk1;
    private List<TransferSerial> tr_serial_fk1;

    public TransferMaster() {
    }

    public TransferMaster(String tm_id) {
        this.tm_id = tm_id;
    }

    public TransferMaster(String tm_id, String tm_no, java.util.Date tm_date, String tm_wh_src, String tm_wh_tgt, Float tm_totqty, Float tm_totbuyprice, Float tm_totsellprice, String tm_note, String tm_totpack, String src_code, Integer astate, Integer locked, Integer posted, Integer mark, String modi_by, java.util.Date modi_date) {
        this.tm_id = tm_id;
        this.tm_no = tm_no;
        this.tm_date = tm_date;
        this.tm_wh_src = tm_wh_src;
        this.tm_wh_tgt = tm_wh_tgt;
        this.tm_totqty = tm_totqty;
        this.tm_totbuyprice = tm_totbuyprice;
        this.tm_totsellprice = tm_totsellprice;
        this.tm_note = tm_note;
        this.tm_totpack = tm_totpack;
        this.src_code = src_code;
        this.astate = astate;
        this.locked = locked;
        this.posted = posted;
        this.mark = mark;
        this.modi_by = modi_by;
        this.modi_date = modi_date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTransferMasterDao() : null;
    }

    public String getTm_id() {
        return tm_id;
    }

    public void setTm_id(String tm_id) {
        this.tm_id = tm_id;
    }

    public String getTm_no() {
        return tm_no;
    }

    public void setTm_no(String tm_no) {
        this.tm_no = tm_no;
    }

    public java.util.Date getTm_date() {
        return tm_date;
    }

    public void setTm_date(java.util.Date tm_date) {
        this.tm_date = tm_date;
    }

    public String getTm_wh_src() {
        return tm_wh_src;
    }

    public void setTm_wh_src(String tm_wh_src) {
        this.tm_wh_src = tm_wh_src;
    }

    public String getTm_wh_tgt() {
        return tm_wh_tgt;
    }

    public void setTm_wh_tgt(String tm_wh_tgt) {
        this.tm_wh_tgt = tm_wh_tgt;
    }

    public Float getTm_totqty() {
        return tm_totqty;
    }

    public void setTm_totqty(Float tm_totqty) {
        this.tm_totqty = tm_totqty;
    }

    public Float getTm_totbuyprice() {
        return tm_totbuyprice;
    }

    public void setTm_totbuyprice(Float tm_totbuyprice) {
        this.tm_totbuyprice = tm_totbuyprice;
    }

    public Float getTm_totsellprice() {
        return tm_totsellprice;
    }

    public void setTm_totsellprice(Float tm_totsellprice) {
        this.tm_totsellprice = tm_totsellprice;
    }

    public String getTm_note() {
        return tm_note;
    }

    public void setTm_note(String tm_note) {
        this.tm_note = tm_note;
    }

    public String getTm_totpack() {
        return tm_totpack;
    }

    public void setTm_totpack(String tm_totpack) {
        this.tm_totpack = tm_totpack;
    }

    public String getSrc_code() {
        return src_code;
    }

    public void setSrc_code(String src_code) {
        this.src_code = src_code;
    }

    public Integer getAstate() {
        return astate;
    }

    public void setAstate(Integer astate) {
        this.astate = astate;
    }

    public Integer getLocked() {
        return locked;
    }

    public void setLocked(Integer locked) {
        this.locked = locked;
    }

    public Integer getPosted() {
        return posted;
    }

    public void setPosted(Integer posted) {
        this.posted = posted;
    }

    public Integer getMark() {
        return mark;
    }

    public void setMark(Integer mark) {
        this.mark = mark;
    }

    public String getModi_by() {
        return modi_by;
    }

    public void setModi_by(String modi_by) {
        this.modi_by = modi_by;
    }

    public java.util.Date getModi_date() {
        return modi_date;
    }

    public void setModi_date(java.util.Date modi_date) {
        this.modi_date = modi_date;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TransferDetail> getTr_detail_fk1() {
        if (tr_detail_fk1 == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransferDetailDao targetDao = daoSession.getTransferDetailDao();
            List<TransferDetail> tr_detail_fk1New = targetDao._queryTransferMaster_Tr_detail_fk1(tm_id);
            synchronized (this) {
                if(tr_detail_fk1 == null) {
                    tr_detail_fk1 = tr_detail_fk1New;
                }
            }
        }
        return tr_detail_fk1;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTr_detail_fk1() {
        tr_detail_fk1 = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TransferSerial> getTr_serial_fk1() {
        if (tr_serial_fk1 == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransferSerialDao targetDao = daoSession.getTransferSerialDao();
            List<TransferSerial> tr_serial_fk1New = targetDao._queryTransferMaster_Tr_serial_fk1(tm_id);
            synchronized (this) {
                if(tr_serial_fk1 == null) {
                    tr_serial_fk1 = tr_serial_fk1New;
                }
            }
        }
        return tr_serial_fk1;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTr_serial_fk1() {
        tr_serial_fk1 = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
