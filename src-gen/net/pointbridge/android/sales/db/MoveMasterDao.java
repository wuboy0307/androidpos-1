package net.pointbridge.android.sales.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.pointbridge.android.sales.db.MoveMaster;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOVE_MASTER.
*/
public class MoveMasterDao extends AbstractDao<MoveMaster, String> {

    public static final String TABLENAME = "MOVE_MASTER";

    /**
     * Properties of entity MoveMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mm_id = new Property(0, String.class, "mm_id", true, "MM_ID");
        public final static Property Mm_no = new Property(1, String.class, "mm_no", false, "MM_NO");
        public final static Property Mm_date = new Property(2, java.util.Date.class, "mm_date", false, "MM_DATE");
        public final static Property Mm_wh_code = new Property(3, String.class, "mm_wh_code", false, "MM_WH_CODE");
        public final static Property Src_brc_code = new Property(4, String.class, "src_brc_code", false, "SRC_BRC_CODE");
        public final static Property Src_vend_code = new Property(5, String.class, "src_vend_code", false, "SRC_VEND_CODE");
        public final static Property Mm_totqty = new Property(6, Float.class, "mm_totqty", false, "MM_TOTQTY");
        public final static Property Mm_totbuyprice = new Property(7, Float.class, "mm_totbuyprice", false, "MM_TOTBUYPRICE");
        public final static Property Mm_totsellprice = new Property(8, Float.class, "mm_totsellprice", false, "MM_TOTSELLPRICE");
        public final static Property Mv_code = new Property(9, String.class, "mv_code", false, "MV_CODE");
        public final static Property Astate = new Property(10, Integer.class, "astate", false, "ASTATE");
        public final static Property Src_code = new Property(11, String.class, "src_code", false, "SRC_CODE");
        public final static Property Allproc = new Property(12, Integer.class, "allproc", false, "ALLPROC");
        public final static Property Locked = new Property(13, Integer.class, "locked", false, "LOCKED");
        public final static Property Posted = new Property(14, Integer.class, "posted", false, "POSTED");
        public final static Property Mark = new Property(15, Integer.class, "mark", false, "MARK");
        public final static Property Modi_by = new Property(16, String.class, "modi_by", false, "MODI_BY");
        public final static Property Modi_date = new Property(17, java.util.Date.class, "modi_date", false, "MODI_DATE");
    };

    private DaoSession daoSession;


    public MoveMasterDao(DaoConfig config) {
        super(config);
    }
    
    public MoveMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOVE_MASTER' (" + //
                "'MM_ID' TEXT PRIMARY KEY ASC NOT NULL ," + // 0: mm_id
                "'MM_NO' TEXT," + // 1: mm_no
                "'MM_DATE' INTEGER," + // 2: mm_date
                "'MM_WH_CODE' TEXT," + // 3: mm_wh_code
                "'SRC_BRC_CODE' TEXT," + // 4: src_brc_code
                "'SRC_VEND_CODE' TEXT," + // 5: src_vend_code
                "'MM_TOTQTY' REAL," + // 6: mm_totqty
                "'MM_TOTBUYPRICE' REAL," + // 7: mm_totbuyprice
                "'MM_TOTSELLPRICE' REAL," + // 8: mm_totsellprice
                "'MV_CODE' TEXT," + // 9: mv_code
                "'ASTATE' INTEGER," + // 10: astate
                "'SRC_CODE' TEXT," + // 11: src_code
                "'ALLPROC' INTEGER," + // 12: allproc
                "'LOCKED' INTEGER," + // 13: locked
                "'POSTED' INTEGER," + // 14: posted
                "'MARK' INTEGER," + // 15: mark
                "'MODI_BY' TEXT," + // 16: modi_by
                "'MODI_DATE' INTEGER);"); // 17: modi_date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOVE_MASTER_MM_NO ON MOVE_MASTER" +
                " (MM_NO);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOVE_MASTER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MoveMaster entity) {
        stmt.clearBindings();
 
        String mm_id = entity.getMm_id();
        if (mm_id != null) {
            stmt.bindString(1, mm_id);
        }
 
        String mm_no = entity.getMm_no();
        if (mm_no != null) {
            stmt.bindString(2, mm_no);
        }
 
        java.util.Date mm_date = entity.getMm_date();
        if (mm_date != null) {
            stmt.bindLong(3, mm_date.getTime());
        }
 
        String mm_wh_code = entity.getMm_wh_code();
        if (mm_wh_code != null) {
            stmt.bindString(4, mm_wh_code);
        }
 
        String src_brc_code = entity.getSrc_brc_code();
        if (src_brc_code != null) {
            stmt.bindString(5, src_brc_code);
        }
 
        String src_vend_code = entity.getSrc_vend_code();
        if (src_vend_code != null) {
            stmt.bindString(6, src_vend_code);
        }
 
        Float mm_totqty = entity.getMm_totqty();
        if (mm_totqty != null) {
            stmt.bindDouble(7, mm_totqty);
        }
 
        Float mm_totbuyprice = entity.getMm_totbuyprice();
        if (mm_totbuyprice != null) {
            stmt.bindDouble(8, mm_totbuyprice);
        }
 
        Float mm_totsellprice = entity.getMm_totsellprice();
        if (mm_totsellprice != null) {
            stmt.bindDouble(9, mm_totsellprice);
        }
 
        String mv_code = entity.getMv_code();
        if (mv_code != null) {
            stmt.bindString(10, mv_code);
        }
 
        Integer astate = entity.getAstate();
        if (astate != null) {
            stmt.bindLong(11, astate);
        }
 
        String src_code = entity.getSrc_code();
        if (src_code != null) {
            stmt.bindString(12, src_code);
        }
 
        Integer allproc = entity.getAllproc();
        if (allproc != null) {
            stmt.bindLong(13, allproc);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(14, locked);
        }
 
        Integer posted = entity.getPosted();
        if (posted != null) {
            stmt.bindLong(15, posted);
        }
 
        Integer mark = entity.getMark();
        if (mark != null) {
            stmt.bindLong(16, mark);
        }
 
        String modi_by = entity.getModi_by();
        if (modi_by != null) {
            stmt.bindString(17, modi_by);
        }
 
        java.util.Date modi_date = entity.getModi_date();
        if (modi_date != null) {
            stmt.bindLong(18, modi_date.getTime());
        }
    }

    @Override
    protected void attachEntity(MoveMaster entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MoveMaster readEntity(Cursor cursor, int offset) {
        MoveMaster entity = new MoveMaster( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mm_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mm_no
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // mm_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mm_wh_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // src_brc_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // src_vend_code
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // mm_totqty
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // mm_totbuyprice
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // mm_totsellprice
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mv_code
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // astate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // src_code
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // allproc
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // locked
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // posted
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // mark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // modi_by
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // modi_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MoveMaster entity, int offset) {
        entity.setMm_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMm_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMm_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setMm_wh_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSrc_brc_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSrc_vend_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMm_totqty(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setMm_totbuyprice(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setMm_totsellprice(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setMv_code(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAstate(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSrc_code(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAllproc(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setLocked(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPosted(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setMark(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setModi_by(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setModi_date(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MoveMaster entity, long rowId) {
        return entity.getMm_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MoveMaster entity) {
        if(entity != null) {
            return entity.getMm_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
